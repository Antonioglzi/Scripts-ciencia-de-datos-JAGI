import numpy as np
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import matplotlib.pyplot as plt
import seaborn as sns

# Cargar el conjunto de datos de Iris
iris = load_iris()
df = pd.DataFrame(data=iris.data, columns=iris.feature_names)
df['species'] = iris.target

# Filtrar las clases para tener un problema de clasificación binaria
df = df[df['species'] != 2]
df['species'] = df['species'].apply(lambda x: 1 if x == 1 else 0)

# Mostrar las primeras filas del conjunto de datos
print(df.head())

# Selección de características y variable objetivo
X = df[['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']]
y = df['species']

# División de los datos en conjuntos de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# Crear el modelo de regresión logística
model = LogisticRegression()

# Entrenar el modelo
model.fit(X_train, y_train)

# Predicciones
y_train_pred = model.predict(X_train)
y_test_pred = model.predict(X_test)

# Métricas de evaluación
print(f"Precisión en entrenamiento: {accuracy_score(y_train, y_train_pred)}")
print(f"Precisión en prueba: {accuracy_score(y_test, y_test_pred)}")
print("Matriz de confusión:")
print(confusion_matrix(y_test, y_test_pred))
print("Informe de clasificación:")
print(classification_report(y_test, y_test_pred))

# Gráfico de matriz de confusión
plt.figure(figsize=(8, 6))
sns.heatmap(confusion_matrix(y_test, y_test_pred), annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicciones')
plt.ylabel('Valores Reales')
plt.title('Matriz de Confusión')
plt.show()
