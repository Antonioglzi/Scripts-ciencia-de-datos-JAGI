# Modelo Prophet
pip install prophet

import pandas as pd
import numpy as np

# Carga base de datos archivo CSV
data = pd.read_csv('d://ciencia de datos/datos masivos/pasajeros avion/AirPassengers.csv')
data.head(10)

import pandas as pd
import matplotlib.pyplot as plt

# Cargar datos 
data = pd.read_csv('d://ciencia de datos/datos masivos/pasajeros avion/AirPassengers.csv', parse_dates=['Month'], index_col='Month')
series = data['#Passengers']

# Plotear los datos
plt.figure(figsize=(10, 6))
plt.plot(series, label='Pasajeros Mensuales')
plt.title('Datos de Series de Tiempo: Pasajeros Mensuales')
plt.xlabel('Año')
plt.ylabel('# Pasajeros')
plt.legend()
plt.show()

# Visualizacion componentes
from statsmodels.tsa.seasonal import seasonal_decompose

# Descomponer la serie de tiempo
decomposition = seasonal_decompose(series, model='additive')
trend = decomposition.trend
seasonal = decomposition.seasonal
residual = decomposition.resid

# Plotear los componentes
plt.figure(figsize=(12, 8))
plt.subplot(411)
plt.plot(series, label='Original')
plt.legend(loc='best')
plt.subplot(412)
plt.plot(trend, label='Tendencia')
plt.legend(loc='best')
plt.subplot(413)
plt.plot(seasonal, label='Estacionalidad')
plt.legend(loc='best')
plt.subplot(414)
plt.plot(residual, label='Residuo')

# Definición de esgtacionariedad y parametros p y q
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.arima.model import ARIMA

# Cargar datos de ejemplo
data = pd.read_csv('d://ciencia de datos/datos masivos/pasajeros avion/AirPassengers.csv', parse_dates=['Month'], index_col='Month')
series = data['#Passengers']

# Convierte el índice a tipo datetime si no lo es
series.index = pd.to_datetime(series.index)  
# Configura la frecuencia a mensual
series = series.asfreq('MS')  

# Plotear la serie de tiempo original
plt.figure(figsize=(10, 6))
plt.plot(series, label='Pasajeros Mensuales')
plt.title('Datos de Series de Tiempo: Pasajeros Mensuales')
plt.xlabel('Año')
plt.ylabel('# Pasajeros')
plt.legend()
plt.show()

# Verificar estacionariedad utilizando la prueba de Dickey-Fuller aumentada
result = adfuller(series)
print('ADF Statistic:', result[0])
print('p-value:', result[1])

# Si la serie no es estacionaria, diferenciar los datos
differenced_series = series.diff().dropna()

from statsmodels.graphics.tsaplots import plot_acf 
fig, (ax1, ax2, ax3) = plt.subplots(3) 
plot_acf(series, ax=ax1) 
plot_acf(series.diff().dropna(), ax=ax2) 
plot_acf(series.diff().diff().dropna(), ax=ax3)

# Identificación de los parámetros p y q utilizando ACF y PACF
fig, axes = plt.subplots(1, 2, figsize=(15, 6))
sm.graphics.tsa.plot_acf(differenced_series, lags=20, ax=axes[0])
sm.graphics.tsa.plot_pacf(differenced_series, lags=20, ax=axes[1])
plt.show()


